"""
CLI –∫–æ–º–∞–Ω–¥—ã –¥–ª—è DNS Routing Manager.
–ò—Å–ø–æ–ª—å–∑—É–µ—Ç Click –¥–ª—è —Å–æ–∑–¥–∞–Ω–∏—è —É–¥–æ–±–Ω–æ–≥–æ –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å–∞.
"""
import click
import sys
from typing import List
from pathlib import Path

from ..core.resolver import DNSResolver
from ..core.route_manager import RouteManager
from ..models import Domain, DomainType, RouteType
from ..config import get_config


@click.group(name="dns-routing")
@click.version_option(version="1.0.0", prog_name="DNS Routing Manager")
def cli():
    """
    DNS Routing Manager - –ò–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç –¥–ª—è —Å–µ–ª–µ–∫—Ç–∏–≤–Ω–æ–π –º–∞—Ä—à—Ä—É—Ç–∏–∑–∞—Ü–∏–∏ —Å–µ—Ç–µ–≤–æ–≥–æ —Ç—Ä–∞—Ñ–∏–∫–∞.
    
    –ü–æ–∑–≤–æ–ª—è–µ—Ç –Ω–∞–ø—Ä–∞–≤–ª—è—Ç—å —Ç—Ä–∞—Ñ–∏–∫ —á–µ—Ä–µ–∑ —Ä–∞–∑–Ω—ã–µ –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å—ã –Ω–∞ –æ—Å–Ω–æ–≤–µ –¥–æ–º–µ–Ω–Ω—ã—Ö –∏–º–µ–Ω.
    """
    pass


@cli.command()
def status():
    """–ü–æ–∫–∞–∑–∞—Ç—å —Ç–µ–∫—É—â–∏–π —Å—Ç–∞—Ç—É—Å —Å–∏—Å—Ç–µ–º—ã"""
    click.echo("=== DNS Routing Manager Status ===")
    
    try:
        config = get_config()
        
        click.echo(f"üì° Local Interface: {config.local_interface.name} (gateway: {config.local_interface.gateway})")
        click.echo(f"üîí VPN Interface: {config.vpn_interface.name}")
        
        # –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ DNS –∫—ç—à–∞
        resolver = DNSResolver()
        dns_stats = resolver.get_cache_stats()
        click.echo(f"üóÑÔ∏è  DNS Cache: {dns_stats['valid_entries']}/{dns_stats['total_entries']} valid entries")
        
        # –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –º–∞—Ä—à—Ä—É—Ç–æ–≤
        route_manager = RouteManager()
        routes_count = route_manager.get_active_routes_count()
        click.echo(f"üõ£Ô∏è  Active Routes: {routes_count}")
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ñ–∞–π–ª—ã –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏
        config_files = [
            ("domains_ru.txt", config.domains_ru_file),
            ("domains_com.txt", config.domains_com_file),
            ("ips_local.txt", config.ips_local_file),
            ("ips_vpn.txt", config.ips_vpn_file),
        ]
        
        click.echo("\nüìÅ Configuration Files:")
        for name, path in config_files:
            if path.exists():
                line_count = len(path.read_text().strip().split('\n'))
                click.echo(f"   ‚úÖ {name}: {line_count} entries")
            else:
                click.echo(f"   ‚ùå {name}: not found")
        
    except Exception as e:
        click.echo(f"‚ùå Error: {e}", err=True)
        sys.exit(1)


@cli.group()
def dns():
    """DNS —Ä–µ–∑–æ–ª–≤–∏–Ω–≥ –∏ –∫—ç—à –æ–ø–µ—Ä–∞—Ü–∏–∏"""
    pass


@dns.command()
@click.argument('domain')
@click.option('--type', 'domain_type', 
              type=click.Choice(['exact', 'wildcard', 'deep']), 
              default='exact',
              help='–¢–∏–ø –¥–æ–º–µ–Ω–∞ –¥–ª—è —Ä–µ–∑–æ–ª–≤–∏–Ω–≥–∞')
def resolve(domain, domain_type):
    """–†–µ–∑–æ–ª–≤–∏—Ç—å –¥–æ–º–µ–Ω –≤ IP –∞–¥—Ä–µ—Å–∞"""
    click.echo(f"Resolving {domain} ({domain_type})...")
    
    try:
        resolver = DNSResolver()
        
        # –°–æ–∑–¥–∞–µ–º –æ–±—ä–µ–∫—Ç –¥–æ–º–µ–Ω–∞
        domain_obj = Domain(
            name=domain,
            domain_type=DomainType(domain_type),
            route_type=RouteType.VPN  # –í—Ä–µ–º–µ–Ω–Ω–æ, –¥–ª—è —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è
        )
        
        result = resolver.resolve_domain(domain_obj)
        
        if result.success:
            click.echo(f"‚úÖ Success: Found {len(result.ips)} IP addresses")
            for ip in result.ips:
                click.echo(f"   {ip}")
            click.echo(f"Resolution time: {result.resolution_time:.3f}s")
        else:
            click.echo(f"‚ùå Failed: {result.error_message}")
            
    except Exception as e:
        click.echo(f"‚ùå Error: {e}", err=True)


@dns.command()
def cache():
    """–ü–æ–∫–∞–∑–∞—Ç—å —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É DNS –∫—ç—à–∞"""
    try:
        resolver = DNSResolver()
        stats = resolver.get_cache_stats()
        
        click.echo("=== DNS Cache Stats ===")
        click.echo(f"Total entries: {stats['total_entries']}")
        click.echo(f"Valid entries: {stats['valid_entries']}")
        click.echo(f"Expired entries: {stats['expired_entries']}")
        click.echo(f"Cache file: {stats['cache_file']}")
        
    except Exception as e:
        click.echo(f"‚ùå Error: {e}", err=True)


@dns.command()
@click.confirmation_option(prompt='Are you sure you want to clear DNS cache?')
def clear():
    """–û—á–∏—Å—Ç–∏—Ç—å DNS –∫—ç—à"""
    try:
        resolver = DNSResolver()
        resolver.clear_cache()
        click.echo("‚úÖ DNS cache cleared")
        
    except Exception as e:
        click.echo(f"‚ùå Error: {e}", err=True)


@cli.group()
def routes():
    """–£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –º–∞—Ä—à—Ä—É—Ç–∞–º–∏"""
    pass


@routes.command()
@click.argument('target')
@click.option('--via', type=click.Choice(['local', 'vpn']), required=True,
              help='–ú–∞—Ä—à—Ä—É—Ç–∏–∑–∏—Ä–æ–≤–∞—Ç—å —á–µ—Ä–µ–∑ local –∏–ª–∏ vpn')
def add(target, via):
    """–î–æ–±–∞–≤–∏—Ç—å –º–∞—Ä—à—Ä—É—Ç –¥–ª—è IP –∏–ª–∏ –ø–æ–¥—Å–µ—Ç–∏"""
    click.echo(f"Adding route {target} via {via}...")
    
    try:
        route_manager = RouteManager()
        route_type = RouteType.LOCAL if via == 'local' else RouteType.VPN
        
        result = route_manager.add_route(target, route_type)
        
        if result.success:
            click.echo(f"‚úÖ {result.message}")
        else:
            click.echo(f"‚ùå {result.message}")
            for error in result.errors:
                click.echo(f"   Error: {error}")
                
    except Exception as e:
        click.echo(f"‚ùå Error: {e}", err=True)


@routes.command()
@click.argument('target')
def remove(target):
    """–£–¥–∞–ª–∏—Ç—å –º–∞—Ä—à—Ä—É—Ç –¥–ª—è IP –∏–ª–∏ –ø–æ–¥—Å–µ—Ç–∏"""
    click.echo(f"Removing route for {target}...")
    
    try:
        route_manager = RouteManager()
        result = route_manager.remove_route(target)
        
        if result.success:
            click.echo(f"‚úÖ {result.message}")
        else:
            click.echo(f"‚ùå {result.message}")
            
    except Exception as e:
        click.echo(f"‚ùå Error: {e}", err=True)


@routes.command()
@click.argument('target')
def check(target):
    """–ü—Ä–æ–≤–µ—Ä–∏—Ç—å —Å—É—â–µ—Å—Ç–≤—É—é—â–∏–π –º–∞—Ä—à—Ä—É—Ç"""
    click.echo(f"Checking route for {target}...")
    
    try:
        route_manager = RouteManager()
        route_info = route_manager.check_route(target)
        
        if route_info:
            click.echo("‚úÖ Route found:")
            for key, value in route_info.items():
                click.echo(f"   {key}: {value}")
        else:
            click.echo("‚ùå No route found")
            
    except Exception as e:
        click.echo(f"‚ùå Error: {e}", err=True)


@routes.command()
@click.confirmation_option(prompt='Are you sure you want to clear all routes?')
def clear():
    """–û—á–∏—Å—Ç–∏—Ç—å –≤—Å–µ –º–∞—Ä—à—Ä—É—Ç—ã (–û–°–¢–û–†–û–ñ–ù–û!)"""
    click.echo("‚ö†Ô∏è  Clearing all routes...")
    
    try:
        route_manager = RouteManager()
        result = route_manager.clear_all_routes()
        
        if result.success:
            click.echo(f"‚úÖ {result.message}")
        else:
            click.echo(f"‚ùå {result.message}")
            
    except Exception as e:
        click.echo(f"‚ùå Error: {e}", err=True)


def load_domains_from_file(file_path: Path) -> List[str]:
    """–ó–∞–≥—Ä—É–∂–∞–µ—Ç –¥–æ–º–µ–Ω—ã –∏–∑ —Ñ–∞–π–ª–∞, –∏–≥–Ω–æ—Ä–∏—Ä—É—è –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–∏"""
    domains = []
    
    if not file_path.exists():
        return domains
    
    for line in file_path.read_text().strip().split('\n'):
        line = line.strip()
        if line and not line.startswith('#'):
            domains.append(line)
    
    return domains


@cli.command()
@click.option('--ru-only', is_flag=True, help='–û–±—Ä–∞–±–æ—Ç–∞—Ç—å —Ç–æ–ª—å–∫–æ —Ä–æ—Å—Å–∏–π—Å–∫–∏–µ –¥–æ–º–µ–Ω—ã')
@click.option('--com-only', is_flag=True, help='–û–±—Ä–∞–±–æ—Ç–∞—Ç—å —Ç–æ–ª—å–∫–æ –º–µ–∂–¥—É–Ω–∞—Ä–æ–¥–Ω—ã–µ –¥–æ–º–µ–Ω—ã')
@click.option('--dry-run', is_flag=True, help='–ü–æ–∫–∞–∑–∞—Ç—å —á—Ç–æ –±—É–¥–µ—Ç —Å–¥–µ–ª–∞–Ω–æ –±–µ–∑ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è')
def process(ru_only, com_only, dry_run):
    """–û–±—Ä–∞–±–æ—Ç–∞—Ç—å –≤—Å–µ –¥–æ–º–µ–Ω—ã –∏–∑ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–æ–Ω–Ω—ã—Ö —Ñ–∞–π–ª–æ–≤"""
    
    if dry_run:
        click.echo("üîç DRY RUN MODE - –∫–æ–º–∞–Ω–¥—ã –Ω–µ –±—É–¥—É—Ç –≤—ã–ø–æ–ª–Ω–µ–Ω—ã")
    
    try:
        config = get_config()
        resolver = DNSResolver()
        route_manager = RouteManager()
        
        tasks = []
        
        # –ó–∞–≥—Ä—É–∂–∞–µ–º —Ä–æ—Å—Å–∏–π—Å–∫–∏–µ –¥–æ–º–µ–Ω—ã
        if not com_only:
            ru_domains = load_domains_from_file(config.domains_ru_file)
            if ru_domains:
                tasks.append(('Russian domains', ru_domains, RouteType.LOCAL))
                click.echo(f"üìÅ Loaded {len(ru_domains)} Russian domains")
        
        # –ó–∞–≥—Ä—É–∂–∞–µ–º –º–µ–∂–¥—É–Ω–∞—Ä–æ–¥–Ω—ã–µ –¥–æ–º–µ–Ω—ã
        if not ru_only:
            com_domains = load_domains_from_file(config.domains_com_file)
            if com_domains:
                tasks.append(('International domains', com_domains, RouteType.VPN))
                click.echo(f"üìÅ Loaded {len(com_domains)} international domains")
        
        if not tasks:
            click.echo("‚ùå No domains to process")
            return
        
        # –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º –∫–∞–∂–¥—É—é –≥—Ä—É–ø–ø—É –¥–æ–º–µ–Ω–æ–≤
        for group_name, domain_names, route_type in tasks:
            click.echo(f"\n=== Processing {group_name} ===")
            
            # –°–æ–∑–¥–∞–µ–º –æ–±—ä–µ–∫—Ç—ã –¥–æ–º–µ–Ω–æ–≤
            domains = []
            for domain_name in domain_names:
                domain = Domain(
                    name=domain_name,
                    domain_type=DomainType.EXACT,  # –û–ø—Ä–µ–¥–µ–ª–∏—Ç—Å—è –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ –≤ __post_init__
                    route_type=route_type
                )
                domains.append(domain)
            
            if dry_run:
                click.echo(f"Would resolve {len(domains)} domains and add routes via {route_type.value}")
                continue
            
            # –†–µ–∑–æ–ª–≤–∏–º –¥–æ–º–µ–Ω—ã
            click.echo(f"üîç Resolving {len(domains)} domains...")
            results = resolver.resolve_domains(domains)
            
            # –°–æ–±–∏—Ä–∞–µ–º –≤—Å–µ IP –¥–ª—è –¥–æ–±–∞–≤–ª–µ–Ω–∏—è –º–∞—Ä—à—Ä—É—Ç–æ–≤
            all_ips = []
            for result in results:
                if result.success:
                    all_ips.extend(result.ips)
            
            if all_ips:
                # –£–±–∏—Ä–∞–µ–º –¥—É–±–ª–∏–∫–∞—Ç—ã
                unique_ips = list(set(all_ips))
                click.echo(f"üõ£Ô∏è  Adding {len(unique_ips)} unique routes...")
                
                # –î–æ–±–∞–≤–ª—è–µ–º –º–∞—Ä—à—Ä—É—Ç—ã
                route_result = route_manager.add_routes_bulk(unique_ips, route_type)
                
                if route_result.success:
                    click.echo(f"‚úÖ {route_result.message}")
                else:
                    click.echo(f"‚ùå {route_result.message}")
            else:
                click.echo("‚ùå No IPs resolved for routing")
        
        click.echo(f"\n‚úÖ Processing complete!")
        
    except Exception as e:
        click.echo(f"‚ùå Error: {e}", err=True)
        sys.exit(1)


if __name__ == '__main__':
    cli()
